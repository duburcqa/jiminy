diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -148,7 +148,6 @@
 
 SET_BOOST_DEFAULT_OPTIONS()
 EXPORT_BOOST_DEFAULT_OPTIONS()
-ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
 
 IF(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "The Python bindings of Pinocchio will be compiled along the main library. If you want to disable this feature, please set the option BUILD_PYTHON_INTERFACE to OFF.")
@@ -157,6 +158,9 @@
   IF(BUILD_WITH_LIBPYTHON)
     set(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
   ENDIF()
+  include(${CMAKE_CURRENT_LIST_DIR}/cmake/python.cmake)
+  FINDPYTHON(REQUIRED)
+  SEARCH_FOR_BOOST_PYTHON(REQUIRED)
 
   ADD_PROJECT_DEPENDENCY(eigenpy 2.7.10 REQUIRED)
 
@@ -176,19 +178,19 @@
 ELSE(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "Pinocchio won't be compiled with its Python bindings. If you want to enable this feature, please set the option BUILD_PYTHON_INTERFACE to ON.")
 ENDIF(BUILD_PYTHON_INTERFACE)
+ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
 
 IF(BUILD_WITH_HPP_FCL_SUPPORT)
   ADD_DEFINITIONS(-DPINOCCHIO_WITH_HPP_FCL)
   LIST(APPEND CFLAGS_DEPENDENCIES "-DPINOCCHIO_WITH_HPP_FCL")
   ADD_PROJECT_DEPENDENCY(hpp-fcl 1.7.3 REQUIRED PKG_CONFIG_REQUIRES "hpp-fcl >= 1.7.3")
   # Check whether hpp-fcl python bindings are available.
   SET(BUILD_WITH_HPP_FCL_PYTHON_BINDINGS FALSE)
+  IF(NOT IS_ABSOLUTE ${PYTHON_SITELIB})
+    SET(PYTHON_SITELIB ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+  ENDIF()
   IF(BUILD_PYTHON_INTERFACE)
-    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import hppfcl"
-      RESULT_VARIABLE _hpp_fcl_python_bindings_not_found
-      OUTPUT_QUIET
-      ERROR_QUIET)
-    IF(_hpp_fcl_python_bindings_not_found EQUAL 0)
+    IF(EXISTS "${PYTHON_SITELIB}/hppfcl")
       SET(BUILD_WITH_HPP_FCL_PYTHON_BINDINGS TRUE)
       MESSAGE(STATUS "Found hpp-fcl Python bindings.")
     ELSE()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -17,7 +17,7 @@
 GET_DIRECTORY_PROPERTY(CURRENT_COMPILE_DEFINITIONS COMPILE_DEFINITIONS)
 
 # Create target libpinocchio.so
-ADD_LIBRARY(${PROJECT_NAME} SHARED ${HEADERS} ${${PROJECT_NAME}_SOURCES})
+ADD_LIBRARY(${PROJECT_NAME} ${HEADERS} ${${PROJECT_NAME}_SOURCES})
 SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
   LINKER_LANGUAGE CXX
   INSTALL_RPATH "\$ORIGIN")
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -141,7 +141,15 @@
         "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nSEARCH_FOR_BOOST_PYTHON(${BOOST_PYTHON_REQUIRED} NAME ${BOOST_PYTHON_NAME})"
     )
   endif()
+  set(Boost_USE_STATIC_LIBS OFF)
+  set(Boost_LIB_PREFIX "")
+  unset(Boost_LIBRARIES)
   find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  unset(Boost_LIBRARIES)
+  if(WIN32)
+    set(Boost_LIB_PREFIX "lib")
+  endif()
+  set(Boost_USE_STATIC_LIBS ON)
   string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)

   list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
@@ -192,7 +200,6 @@
   string(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
   if("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}"
                                                         VERSION_EQUAL "1.70")
-    set(BUILD_SHARED_LIBS ON)
     set(Boost_NO_BOOST_CMAKE ON)
   endif("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70"
         OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
diff --git a/cmake/python.cmake b/cmake/python.cmake
index db414f9..49ce016 100644
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -517,6 +517,14 @@
   # Regex from IsValidTargetName in CMake/Source/cmGeneratorExpression.cxx
   string(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" compile_pyc
                        "compile_pyc_${CMAKE_CURRENT_SOURCE_DIR}")
+
+  string(LENGTH ${compile_pyc} compile_pyc_LENGTH)
+  math(EXPR compile_pyc_START "${compile_pyc_LENGTH}-50")
+  if(${compile_pyc_START} LESS 3)
+    set(compile_pyc_START 3)
+  endif()
+  string(SUBSTRING ${compile_pyc} ${compile_pyc_START} -1 compile_pyc)
+
   if(NOT TARGET ${compile_pyc})
     add_custom_target(${compile_pyc} ALL)
   endif()
diff --git a/cmake/deprecated.hh.cmake b/cmake/deprecated.hh.cmake
--- a/cmake/deprecated.hh.cmake
+++ b/cmake/deprecated.hh.cmake
@@ -26,8 +26,8 @@
 #  define @PACKAGE_CPPNAME@_DEPRECATED [[deprecated]]
 #  define @PACKAGE_CPPNAME@_DEPRECATED_MESSAGE(message) [[deprecated(#message)]]
 # elif defined(__GNUC__) || defined(__clang__)
-#  define @PACKAGE_CPPNAME@_DEPRECATED __attribute__ ((deprecated))
-#  define @PACKAGE_CPPNAME@_DEPRECATED_MESSAGE(message) __attribute__ (( deprecated(#message) ))
+#  define @PACKAGE_CPPNAME@_DEPRECATED /* nothing */
+#  define @PACKAGE_CPPNAME@_DEPRECATED_MESSAGE(message)
 # else
 #  if defined(_MSC_VER) && !defined(__INTEL_COMPILER)
 #   define @PACKAGE_CPPNAME@_DEPRECATED __declspec (deprecated)
