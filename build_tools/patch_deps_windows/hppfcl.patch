diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,6 +107,7 @@
 #ENDIF(WIN32)
 
 ADD_PROJECT_DEPENDENCY(Eigen3 REQUIRED PKG_CONFIG_REQUIRES "eigen3 >= 3.0.0")
+ADD_PROJECT_DEPENDENCY(assimp REQUIRED "assimp >= 5.0.0" NO_MODULE)
 
 if(BUILD_PYTHON_INTERFACE)
   FIND_PACKAGE(eigenpy 2.7.10 REQUIRED)
@@ -121,34 +122,24 @@
   ADD_PROJECT_DEPENDENCY(Boost REQUIRED chrono serialization filesystem)
 ENDIF(WIN32)
 if(BUILD_PYTHON_INTERFACE)
+  ADD_PROJECT_DEPENDENCY(Boost REQUIRED system)
-  find_package(Boost REQUIRED COMPONENTS system)
 endif(BUILD_PYTHON_INTERFACE)
  
 if(Boost_VERSION_STRING VERSION_LESS 1.81)
   # Default C++ version should be C++11
   CHECK_MINIMAL_CXX_STANDARD(11 ENFORCE)
 else()
   # Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)
   CHECK_MINIMAL_CXX_STANDARD(14 ENFORCE)
 endif()
 
 # Optional dependencies
-ADD_PROJECT_DEPENDENCY(octomap PKG_CONFIG_REQUIRES "octomap >= 1.6")
-if(octomap_FOUND)
-  SET(HPP_FCL_HAS_OCTOMAP TRUE)
-  string(REPLACE "." ";" VERSION_LIST ${octomap_VERSION})
-  list(GET VERSION_LIST 0 OCTOMAP_MAJOR_VERSION)
-  list(GET VERSION_LIST 1 OCTOMAP_MINOR_VERSION)
-  list(GET VERSION_LIST 2 OCTOMAP_PATCH_VERSION)
-  message(STATUS "HPP-FCL uses Octomap")
-else()
-  SET(HPP_FCL_HAS_OCTOMAP FALSE)
-  message(STATUS "HPP-FCL does not use Octomap")
-endif()
+SET(HPP_FCL_HAS_OCTOMAP FALSE)
+message(STATUS "FCL does not use Octomap")
 
 option(HPP_FCL_HAS_QHULL "use qhull library to compute convex hulls." FALSE)
 if(HPP_FCL_HAS_QHULL)
-  find_package(Qhull COMPONENTS qhull_r qhullcpp)
+  ADD_PROJECT_DEPENDENCY(Qhull REQUIRED COMPONENTS qhullstatic_r qhullcpp)
   if(Qhull_FOUND)
     set(HPP_FCL_USE_SYSTEM_QHULL TRUE)
     message(STATUS "HPP-FCL uses system Qhull")
@@ -283,7 +274,6 @@
   include/hpp/fcl/timings.h
   )

-add_subdirectory(doc)
 add_subdirectory(src)
 if (BUILD_PYTHON_INTERFACE)
   add_subdirectory(python)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -168,7 +168,6 @@
 LIST(APPEND PROJECT_HEADERS_FULL_PATH ${PROJECT_BINARY_DIR}/include/hpp/fcl/deprecated.hh)
 LIST(APPEND PROJECT_HEADERS_FULL_PATH ${PROJECT_BINARY_DIR}/include/hpp/fcl/warning.hh)
 add_library(${LIBRARY_NAME}
-  SHARED
   ${PROJECT_HEADERS_FULL_PATH}
   ${${LIBRARY_NAME}_SOURCES}
   )
@@ -179,6 +178,7 @@
 ADD_SOURCE_GROUP(${LIBRARY_NAME}_SOURCES)
 ADD_HEADER_GROUP(PROJECT_HEADERS_FULL_PATH)

+ADD_PROJECT_DEPENDENCY(assimp REQUIRED)
 MODERNIZE_TARGET_LINK_LIBRARIES(${LIBRARY_NAME} SCOPE PRIVATE
   TARGETS assimp::assimp
   LIBRARIES ${assimp_LIBRARIES}
@@ -201,7 +201,7 @@
 if(HPP_FCL_HAS_QHULL)
   target_compile_definitions(${LIBRARY_NAME} PRIVATE -DHPP_FCL_HAS_QHULL)
   if (HPP_FCL_USE_SYSTEM_QHULL)
-    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhull_r Qhull::qhullcpp)
+    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhullstatic_r Qhull::qhullcpp)
   else()
     target_include_directories(${LIBRARY_NAME} SYSTEM PRIVATE
       ${Qhull_r_INCLUDE_DIR} ${Qhullcpp_PREFIX})
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -141,7 +141,15 @@
         "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nSEARCH_FOR_BOOST_PYTHON(${BOOST_PYTHON_REQUIRED} NAME ${BOOST_PYTHON_NAME})"
     )
   endif()
+  set(Boost_USE_STATIC_LIBS OFF)
+  set(Boost_LIB_PREFIX "")
+  unset(Boost_LIBRARIES)
   find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  unset(Boost_LIBRARIES)
+  if(WIN32)
+    set(Boost_LIB_PREFIX "lib")
+  endif()
+  set(Boost_USE_STATIC_LIBS ON)
   string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)

   list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
@@ -192,7 +200,6 @@
   string(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
   if("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}"
                                                         VERSION_EQUAL "1.70")
-    set(BUILD_SHARED_LIBS ON)
     set(Boost_NO_BOOST_CMAKE ON)
   endif("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70"
         OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
diff --git a/third-parties/qhull/CMakeLists.txt b/third-parties/qhull/CMakeLists.txt
index 59dff41..2765817 100644
--- a/third-parties/qhull/CMakeLists.txt
+++ b/third-parties/qhull/CMakeLists.txt
@@ -624,3 +624,9 @@ install(FILES html/qhull.man         DESTINATION ${MAN_INSTALL_DIR} RENAME qhull
 install(FILES html/rbox.man          DESTINATION ${MAN_INSTALL_DIR} RENAME rbox.1)
 install(FILES ${doc_FILES}           DESTINATION ${DOC_INSTALL_DIR})
 install(DIRECTORY html/              DESTINATION ${DOC_INSTALL_DIR})
+
+add_compile_options(
+    $<$<CONFIG:>:/MD> #---------|
+    $<$<CONFIG:Debug>:/MDd> #---|-- Statically link the runtime libraries
+    $<$<CONFIG:Release>:/MD> #--|
+)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/include/hpp/fcl/serialization/eigen.h
+++ b/include/hpp/fcl/serialization/eigen.h
@@ -37,6 +37,16 @@
 #endif
 #endif
 
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+namespace Eigen { namespace internal {
+template<> struct traits<boost::archive::xml_iarchive> {enum {Flags=0};};
+template<> struct traits<boost::archive::text_iarchive> {enum {Flags=0};};
+template<> struct traits<boost::archive::binary_iarchive> {enum {Flags=0};};
+} }
+
+
 namespace boost {
 namespace serialization {
 
