diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,48 +107,39 @@
 #ENDIF(WIN32)
 
 ADD_PROJECT_DEPENDENCY(Eigen3 REQUIRED PKG_CONFIG_REQUIRES "eigen3 >= 3.0.0")
+ADD_PROJECT_DEPENDENCY(assimp REQUIRED "assimp >= 5.0.0" NO_MODULE)
 
 if(BUILD_PYTHON_INTERFACE)
   FIND_PACKAGE(eigenpy 2.7.10 REQUIRED)
 endif()
 
 # Required dependencies
 SET_BOOST_DEFAULT_OPTIONS()
 EXPORT_BOOST_DEFAULT_OPTIONS()
-IF(WIN32)
-  ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS chrono thread date_time serialization filesystem)
-ELSE(WIN32)
-  ADD_PROJECT_DEPENDENCY(Boost REQUIRED chrono serialization filesystem)
-ENDIF(WIN32)
 if(BUILD_PYTHON_INTERFACE)
   find_package(Boost REQUIRED COMPONENTS system)
 endif(BUILD_PYTHON_INTERFACE)
+IF(WIN32)
+  ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS chrono thread date_time serialization filesystem)
+ELSE(WIN32)
+  ADD_PROJECT_DEPENDENCY(Boost REQUIRED chrono serialization filesystem)
+ENDIF(WIN32)
 
 if(Boost_VERSION_STRING VERSION_LESS 1.81)
   # Default C++ version should be C++11
   CHECK_MINIMAL_CXX_STANDARD(11 ENFORCE)
 else()
   # Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)
   CHECK_MINIMAL_CXX_STANDARD(14 ENFORCE)
 endif()
 
 # Optional dependencies
-ADD_PROJECT_DEPENDENCY(octomap PKG_CONFIG_REQUIRES "octomap >= 1.6")
-if(octomap_FOUND)
-  SET(HPP_FCL_HAS_OCTOMAP TRUE)
-  string(REPLACE "." ";" VERSION_LIST ${octomap_VERSION})
-  list(GET VERSION_LIST 0 OCTOMAP_MAJOR_VERSION)
-  list(GET VERSION_LIST 1 OCTOMAP_MINOR_VERSION)
-  list(GET VERSION_LIST 2 OCTOMAP_PATCH_VERSION)
-  message(STATUS "HPP-FCL uses Octomap")
-else()
-  SET(HPP_FCL_HAS_OCTOMAP FALSE)
-  message(STATUS "HPP-FCL does not use Octomap")
-endif()
+SET(HPP_FCL_HAS_OCTOMAP FALSE)
+message(STATUS "FCL does not use Octomap")
 
 option(HPP_FCL_HAS_QHULL "use qhull library to compute convex hulls." FALSE)
 if(HPP_FCL_HAS_QHULL)
-  find_package(Qhull COMPONENTS qhull_r qhullcpp)
+  ADD_PROJECT_DEPENDENCY(Qhull REQUIRED COMPONENTS qhullstatic_r qhullcpp)
   if(Qhull_FOUND)
     set(HPP_FCL_USE_SYSTEM_QHULL TRUE)
     message(STATUS "HPP-FCL uses system Qhull")
@@ -283,7 +274,6 @@
   include/hpp/fcl/timings.h
   )

-add_subdirectory(doc)
 add_subdirectory(src)
 if (BUILD_PYTHON_INTERFACE)
   add_subdirectory(python)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -179,6 +179,7 @@
 ADD_SOURCE_GROUP(${LIBRARY_NAME}_SOURCES)
 ADD_HEADER_GROUP(PROJECT_HEADERS_FULL_PATH)
 
+ADD_PROJECT_DEPENDENCY(assimp REQUIRED)
 MODERNIZE_TARGET_LINK_LIBRARIES(${LIBRARY_NAME} SCOPE PRIVATE
   TARGETS assimp::assimp
   LIBRARIES ${assimp_LIBRARIES}
@@ -202,7 +202,7 @@
 if(HPP_FCL_HAS_QHULL)
   target_compile_definitions(${LIBRARY_NAME} PRIVATE -DHPP_FCL_HAS_QHULL)
   if (HPP_FCL_USE_SYSTEM_QHULL)
-    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhull_r Qhull::qhullcpp)
+    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhullstatic_r Qhull::qhullcpp)
   else()
     target_include_directories(${LIBRARY_NAME} SYSTEM PRIVATE
       ${Qhull_r_INCLUDE_DIR} ${Qhullcpp_PREFIX})
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -141,7 +141,10 @@
         "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nSEARCH_FOR_BOOST_PYTHON(${BOOST_PYTHON_REQUIRED} NAME ${BOOST_PYTHON_NAME})"
     )
   endif()
+  unset(Boost_LIBRARIES)
   find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  unset(Boost_LIBRARIES)
+  set(Boost_USE_STATIC_LIBS ON)
   string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)

   list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
diff --git a/cmake/python.cmake b/cmake/python.cmake
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -168,7 +168,9 @@
       set(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
 
       find_package("Python${_PYTHON_VERSION_MAJOR}" REQUIRED
-                   COMPONENTS ${PYTHON_COMPONENTS})
+                   COMPONENTS Interpreter)
+      execute_process(COMMAND "${Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE}" -c "import sysconfig as sysconfig; print(sysconfig.get_path('include'))"
+                      OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIRS)
     else()
       # No hint was provided. We can then check for first Python 2, then Python
       # 3
