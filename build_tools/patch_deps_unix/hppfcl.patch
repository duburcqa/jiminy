diff --git a/CMakeLists.txt b/CMakeLists.txt
index d675c2c..c503cf1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -91,43 +91,34 @@
 #ENDIF(WIN32)
 
 ADD_PROJECT_DEPENDENCY(Eigen3 REQUIRED PKG_CONFIG_REQUIRES "eigen3 >= 3.0.0")
+ADD_PROJECT_DEPENDENCY(assimp REQUIRED "assimp >= 5.0.0" NO_MODULE)
 
 if(BUILD_PYTHON_INTERFACE)
   FIND_PACKAGE(eigenpy 2.2 REQUIRED)
 endif()
 
 # Required dependencies
 SET_BOOST_DEFAULT_OPTIONS()
 EXPORT_BOOST_DEFAULT_OPTIONS()
-IF(WIN32)
-  ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS chrono thread date_time serialization)
-ELSE(WIN32)
-  ADD_PROJECT_DEPENDENCY(Boost REQUIRED chrono serialization)
-ENDIF(WIN32)
 if(BUILD_PYTHON_INTERFACE)
   FINDPYTHON()
   search_for_boost_python(REQUIRED)
   find_package(Boost REQUIRED COMPONENTS system)
 endif(BUILD_PYTHON_INTERFACE)
+IF(WIN32)
+  ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS chrono thread date_time serialization)
+ELSE(WIN32)
+  ADD_PROJECT_DEPENDENCY(Boost REQUIRED chrono serialization)
+ENDIF(WIN32)
 
 # Optional dependencies
-ADD_PROJECT_DEPENDENCY(octomap PKG_CONFIG_REQUIRES "octomap >= 1.6")
-if(octomap_FOUND)
-  SET(HPP_FCL_HAS_OCTOMAP TRUE)
-  string(REPLACE "." ";" VERSION_LIST ${octomap_VERSION})
-  list(GET VERSION_LIST 0 OCTOMAP_MAJOR_VERSION)
-  list(GET VERSION_LIST 1 OCTOMAP_MINOR_VERSION)
-  list(GET VERSION_LIST 2 OCTOMAP_PATCH_VERSION)
-  message(STATUS "FCL uses Octomap")
-else()
-  SET(HPP_FCL_HAS_OCTOMAP FALSE)
-  message(STATUS "FCL does not use Octomap")
-endif()
+SET(HPP_FCL_HAS_OCTOMAP FALSE)
+message(STATUS "FCL does not use Octomap")
 
 option(HPP_FCL_HAS_QHULL "use qhull library to compute convex hulls." FALSE)
 if(HPP_FCL_HAS_QHULL)
   CHECK_MINIMAL_CXX_STANDARD(11 ENFORCE)
-  find_package(Qhull COMPONENTS qhull_r qhullcpp)
+  ADD_PROJECT_DEPENDENCY(Qhull REQUIRED COMPONENTS qhullstatic_r qhullcpp)
   if(Qhull_FOUND)
     set(HPP_FCL_USE_SYSTEM_QHULL TRUE)
   else()
@@ -143,7 +134,7 @@
       PATHS ${Qhull_PREFIX}
       )
     find_library(Qhull_r_LIBRARY
-      NAMES libqhull_r.so
+      NAMES libqhullstatic_r.a
       PATHS ${Qhull_PREFIX}
       )
     if(NOT Qhull_r_LIBRARY)
@@ -221,12 +212,10 @@ SET(${PROJECT_NAME}_HEADERS
   include/hpp/fcl/timings.h
   )

-add_subdirectory(doc)
 add_subdirectory(src)
 if (BUILD_PYTHON_INTERFACE)
   add_subdirectory(python)
 endif ()
-add_subdirectory(test)

 pkg_config_append_libs("hpp-fcl")
 IF(HPP_FCL_HAS_OCTOMAP)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 043d18b..dcc79be 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -153,7 +153,6 @@ FOREACH(header ${${PROJECT_NAME}_HEADERS})
 ENDFOREACH()
 LIST(APPEND PROJECT_HEADERS_FULL_PATH ${PROJECT_BINARY_DIR}/include/hpp/fcl/config.hh)
 add_library(${LIBRARY_NAME}
-  SHARED
   ${PROJECT_HEADERS_FULL_PATH}
   ${${LIBRARY_NAME}_SOURCES}
   )
@@ -162,6 +161,7 @@ add_library(${LIBRARY_NAME}
 ADD_SOURCE_GROUP(${LIBRARY_NAME}_SOURCES)
 ADD_HEADER_GROUP(PROJECT_HEADERS_FULL_PATH)

+ADD_PROJECT_DEPENDENCY(assimp REQUIRED)
 TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME}
   SYSTEM PUBLIC
   ${Boost_INCLUDE_DIRS}
@@ -169,8 +169,7 @@

 TARGET_LINK_LIBRARIES(${LIBRARY_NAME}
   PRIVATE
-  ${assimp_LIBRARIES}
-  # assimp::assimp # Not working
+  Boost::boost assimp::assimp
   )

 TARGET_LINK_LIBRARIES(${LIBRARY_NAME}
@@ -190,7 +189,7 @@
 if(HPP_FCL_HAS_QHULL)
   target_compile_definitions(${LIBRARY_NAME} PRIVATE -DHPP_FCL_HAS_QHULL)
   if (HPP_FCL_USE_SYSTEM_QHULL)
-    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhull_r Qhull::qhullcpp)
+    target_link_libraries(${LIBRARY_NAME} PRIVATE Qhull::qhullstatic_r Qhull::qhullcpp)
   else()
     target_include_directories(${LIBRARY_NAME} SYSTEM PRIVATE
       ${Qhull_r_INCLUDE_DIR} ${Qhullcpp_PREFIX})
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
index bea38e4..3dcfbf6 100644
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -102,7 +102,10 @@ MACRO(SEARCH_FOR_BOOST_PYTHON)
     MESSAGE(WARNING "Impossible to check Boost.Python version. Trying with 'python'.")
   ENDIF(NOT BOOST_PYTHON_FOUND)

+  unset(Boost_LIBRARIES)
   FIND_PACKAGE(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  unset(Boost_LIBRARIES)
+  set(Boost_USE_STATIC_LIBS ON)
   STRING(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)

   LIST(APPEND LOGGING_WATCHED_VARIABLES
@@ -151,7 +154,6 @@ MACRO(SEARCH_FOR_BOOST)
   FIND_PACKAGE(Boost ${BOOST_REQUIRED})
   STRING(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
   IF("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
-    SET(BUILD_SHARED_LIBS ON)
     SET(Boost_NO_BOOST_CMAKE ON)
   ENDIF("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
 
diff --git a/cmake/python.cmake b/cmake/python.cmake
index 3286da3..a142198 100644
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -96,7 +96,9 @@ MACRO(FINDPYTHON)
       SET(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
       SET(Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE ${PYTHON_EXECUTABLE})

-      FIND_PACKAGE("Python${_PYTHON_VERSION_MAJOR}" REQUIRED COMPONENTS Interpreter Development)
+      FIND_PACKAGE("Python${_PYTHON_VERSION_MAJOR}" COMPONENTS Interpreter)
+      execute_process(COMMAND "${Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE}" -c "import sysconfig as sysconfig; print(sysconfig.get_path('include'))"
+                      OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIRS)
     ELSE()
       # No hind was provided. We can then check for first Python 2, then Python 3
       FIND_PACKAGE(Python2 QUIET COMPONENTS Interpreter Development)
