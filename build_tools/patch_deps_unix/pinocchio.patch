diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -120,11 +120,6 @@
   ADD_DEFINITIONS(-DPINOCCHIO_WITH_URDFDOM)
   LIST(APPEND CFLAGS_DEPENDENCIES "-DPINOCCHIO_WITH_URDFDOM")
 
-  IF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")
-    SET(CMAKE_CXX_STANDARD 11)
-    SET(CMAKE_CXX_STANDARD_REQUIRED ON)
-    MESSAGE(STATUS "Since urdfdom >= 1.0.0, the default C++ standard is C++11. The project is then compiled with C++11 standard.")
-  ENDIF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")
 ENDIF(BUILD_WITH_URDF_SUPPORT)
 
 IF(BUILD_WITH_AUTODIFF_SUPPORT)
@@ -148,7 +143,6 @@
 
 SET_BOOST_DEFAULT_OPTIONS()
 EXPORT_BOOST_DEFAULT_OPTIONS()
-ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
 
 IF(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "The Python bindings of Pinocchio will be compiled along the main library. If you want to disable this feature, please set the option BUILD_PYTHON_INTERFACE to OFF.")
@@ -176,19 +170,19 @@
 ELSE(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "Pinocchio won't be compiled with its Python bindings. If you want to enable this feature, please set the option BUILD_PYTHON_INTERFACE to ON.")
 ENDIF(BUILD_PYTHON_INTERFACE)
+ADD_PROJECT_DEPENDENCY(Boost REQUIRED COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
 
 IF(BUILD_WITH_HPP_FCL_SUPPORT)
   ADD_DEFINITIONS(-DPINOCCHIO_WITH_HPP_FCL)
   LIST(APPEND CFLAGS_DEPENDENCIES "-DPINOCCHIO_WITH_HPP_FCL")
   ADD_PROJECT_DEPENDENCY(hpp-fcl 1.7.3 REQUIRED PKG_CONFIG_REQUIRES "hpp-fcl >= 1.7.3")
   # Check whether hpp-fcl python bindings are available.
   SET(BUILD_WITH_HPP_FCL_PYTHON_BINDINGS FALSE)
+  IF(NOT IS_ABSOLUTE ${PYTHON_SITELIB})
+    SET(PYTHON_SITELIB ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+  ENDIF()
   IF(BUILD_PYTHON_INTERFACE)
-    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import hppfcl"
-      RESULT_VARIABLE _hpp_fcl_python_bindings_not_found
-      OUTPUT_QUIET
-      ERROR_QUIET)
-    IF(_hpp_fcl_python_bindings_not_found EQUAL 0)
+    IF(EXISTS "${PYTHON_SITELIB}/hppfcl")
       SET(BUILD_WITH_HPP_FCL_PYTHON_BINDINGS TRUE)
       MESSAGE(STATUS "Found hpp-fcl Python bindings.")
     ELSE()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -17,7 +17,7 @@
 GET_DIRECTORY_PROPERTY(CURRENT_COMPILE_DEFINITIONS COMPILE_DEFINITIONS)
 
 # Create target libpinocchio.so
-ADD_LIBRARY(${PROJECT_NAME} SHARED ${HEADERS} ${${PROJECT_NAME}_SOURCES})
+ADD_LIBRARY(${PROJECT_NAME} ${HEADERS} ${${PROJECT_NAME}_SOURCES})
 SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
   LINKER_LANGUAGE CXX
   INSTALL_RPATH "\$ORIGIN")
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -141,7 +141,10 @@
         "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nSEARCH_FOR_BOOST_PYTHON(${BOOST_PYTHON_REQUIRED} NAME ${BOOST_PYTHON_NAME})"
     )
   endif()
+  unset(Boost_LIBRARIES)
   find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  unset(Boost_LIBRARIES)
+  set(Boost_USE_STATIC_LIBS ON)
   string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)

   list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
@@ -192,7 +195,6 @@
   string(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
   if("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}"
                                                         VERSION_EQUAL "1.70")
-    set(BUILD_SHARED_LIBS ON)
     set(Boost_NO_BOOST_CMAKE ON)
   endif("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70"
         OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
@@ -289,6 +288,9 @@
       ${target} ${PUBLIC_KEYWORD}
       Boost::python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
 
+    if(APPLE)
+      target_link_options(${target} INTERFACE -undefined dynamic_lookup)
+    endif(APPLE)
   else()
 
     if(APPLE)
diff --git a/bindings/python/CMakeLists.txt b/bindings/python/CMakeLists.txt
--- a/bindings/python/CMakeLists.txt
+++ b/bindings/python/CMakeLists.txt
@@ -184,6 +184,17 @@
     SET_TARGET_PROPERTIES(${PYWRAP} PROPERTIES INSTALL_RPATH "\$ORIGIN/../../..")
   ENDIF()
 
+  if(GENERATE_PYTHON_STUBS)
+      include("${CMAKE_SOURCE_DIR}/cmake/stubs.cmake")
+      load_stubgen()
+      if(IS_ABSOLUTE ${PYTHON_SITELIB})
+          set(ABSOLUTE_PYTHON_SITELIB ${PYTHON_SITELIB})
+      else()
+          set(ABSOLUTE_PYTHON_SITELIB ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+      endif()
+      generate_stubs(${CMAKE_CURRENT_BINARY_DIR} ${PROJECT_NAME} ${ABSOLUTE_PYTHON_SITELIB})
+  endif(GENERATE_PYTHON_STUBS)
+
   INSTALL(
     TARGETS ${PYWRAP}
     EXPORT ${TARGETS_EXPORT_NAME}
diff --git a/bindings/python/algorithm/expose-com.cpp b/bindings/python/algorithm/expose-com.cpp
index 50c5ab03..bd2c3ae5 100644
--- a/bindings/python/algorithm/expose-com.cpp
+++ b/bindings/python/algorithm/expose-com.cpp
@@ -229,10 +229,10 @@ namespace pinocchio
                        "subtree_root_joint_id"),
               "Computes the Jacobian of the CoM of the given subtree (subtree_root_joint_id) expressed in the WORLD frame, according to the given joint configuration.");
       bp::def("jacobianSubtreeCoMJacobian",jacobian_subtree_com_kinematics_proxy,
-              bp::args("Model, the model of the kinematic tree",
-                       "Data, the data associated to the model where the results are stored",
-                       "Joint configuration q (size Model::nq)",
-                       "Subtree root ID, the index of the subtree root joint."),
+              bp::args("model",
+                       "data",
+                       "q",
+                       "subtree_root_joint_id"),
               "Computes the Jacobian of the CoM of the given subtree expressed in the world frame, according to the given joint configuration.",
               deprecated_function<>("This function is now deprecated. It has been renamed jacobianSubtreeCenterOfMass."));
       
@@ -243,9 +243,9 @@ namespace pinocchio
               "Computes the Jacobian of the CoM of the given subtree (subtree_root_joint_id) expressed in the WORLD frame, according to the given entries in data.");
 
       bp::def("jacobianSubtreeCoMJacobian",jacobian_subtree_com_proxy,
-              bp::args("Model, the model of the kinematic tree",
-                       "Data, the data associated to the model where the results are stored",
-                       "Subtree root ID, the index of the subtree root joint."),
+              bp::args("model",
+                       "data",
+                       "subtree_root_joint_id"),
               "Computes the Jacobian of the CoM of the given subtree expressed in the world frame, according to the given entries in data.",
               deprecated_function<>("This function is now deprecated. It has been renamed jacobianSubtreeCenterOfMass."));
       
diff --git a/bindings/python/spatial/expose-explog.cpp b/bindings/python/spatial/expose-explog.cpp
index f5e03568..0edd0a1c 100644
--- a/bindings/python/spatial/expose-explog.cpp
+++ b/bindings/python/spatial/expose-explog.cpp
@@ -3,8 +3,8 @@
 // Copyright (c) 2015 Wandercraft, 86 rue de Paris 91400 Orsay, France.
 //
 
+#include "pinocchio/bindings/python/fwd.hpp"
 #include "pinocchio/bindings/python/spatial/explog.hpp"
-#include <boost/python.hpp>
 
 namespace pinocchio
 {
@@ -26,7 +26,7 @@ namespace pinocchio
               " the tangent of SO(3) at Identity.");
       
       bp::def("log3",&log3_proxy<Eigen::Matrix3d>,
-              bp::arg("Rotation matrix (matrix of size 3x3))"),
+              bp::arg("R"),
               "Log: SO3 -> so3. Pseudo-inverse of log from SO3"
               " -> { v in so3, ||v|| < 2pi }.Exp: so3 -> SO3.");
       
diff --git a/cmake/python.cmake b/cmake/python.cmake
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -168,7 +168,9 @@
       set(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
 
       find_package("Python${_PYTHON_VERSION_MAJOR}" REQUIRED
-                   COMPONENTS ${PYTHON_COMPONENTS})
+                   COMPONENTS Interpreter)
+      execute_process(COMMAND "${Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE}" -c "import sysconfig as sysconfig; print(sysconfig.get_path('include'))"
+                      OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIRS)
     else()
       # No hint was provided. We can then check for first Python 2, then Python
       # 3
