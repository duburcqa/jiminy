# Minimum version required
cmake_minimum_required(VERSION 3.12.4)

# Set the build version
set(BUILD_VERSION 1.7.18)

# Set compatibility
set(COMPATIBILITY_VERSION SameMinorVersion)

# Enforce generation of `compile_commands.json`.
# This file is used by various tools such as code or clang-tidy to resolve imports.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")

# Extract major, minor and patch version
string(REPLACE "." ";" _VERSION "${BUILD_VERSION}")
list(GET _VERSION 0 BUILD_VERSION_MAJOR)
list(GET _VERSION 1 BUILD_VERSION_MINOR)
list(GET _VERSION 2 BUILD_VERSION_PATCH)

# Add definition of Jiminy version for C++ headers
add_definitions("-DJIMINY_VERSION=\"${BUILD_VERSION}\"")

# Enable C++ language
enable_language(CXX)

# Project and library name
project(jiminy VERSION ${BUILD_VERSION})
set(LIBRARY_NAME ${PROJECT_NAME})
set(PYTHON_LIBRARY_NAME "core")

# Set build environment and standard dependencies
include(${CMAKE_SOURCE_DIR}/build_tools/cmake/base.cmake)
include(${CMAKE_SOURCE_DIR}/build_tools/cmake/docs.cmake)
include(${CMAKE_SOURCE_DIR}/build_tools/cmake/boostPythonDocstring.cmake)
include(${CMAKE_SOURCE_DIR}/build_tools/cmake/exportCmakeConfigFiles.cmake)
include(${CMAKE_SOURCE_DIR}/build_tools/cmake/buildPythonWheel.cmake)

# Set the compilation flags.
# Not using `add_compile_options` because it does not propagate to external projects.
if(NOT CMAKE_CXX_FLAGS)
    set(CMAKE_CXX_FLAGS "$ENV{CMAKE_CXX_FLAGS}")
endif()
string(REGEX MATCHALL "(^| )-DEIGEN_[A-Z0-9_]+=?[0-9]*( |$)" EIGEN_DEFINITIONS "${CMAKE_CXX_FLAGS}")
list(TRANSFORM EIGEN_DEFINITIONS STRIP)
list(REMOVE_DUPLICATES EIGEN_DEFINITIONS)
list(TRANSFORM EIGEN_DEFINITIONS REPLACE "^-D" "")
if(EIGEN_DEFINITIONS)
    message(STATUS "Eigen preprocessor directives: ${EIGEN_DEFINITIONS}")
endif()
if(MSVC)
    string(REGEX MATCH "/arch:[a-zA-Z0-9_-]*" CMAKE_CXX_ARCH "${CMAKE_CXX_FLAGS}")
    if(CMAKE_CXX_ARCH MATCHES "AVX[0-9]+")
        # Eigen<3.4 relies on __FMA__ definition to detect if FMA is available,
        # which is not set automatically by MSVC.
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__FMA__")
        if(MSVC_VERSION GREATER 1930)
            # Floating-point contractions are not generated by default on MSVC > 2019.
            # After this point, it is necessary to pass `/fp:contract`. Following the
            # same paradigm as Eigen>3.4, we enable it if AVX2+ is required.
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:contract")
        endif()
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /EHsc /bigobj /Gy /Zc:inline /Zc:preprocessor /Zc:__cplusplus /permissive- /DWIN32 /D_USE_MATH_DEFINES /DNOMINMAX")
    set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Od")
    set(CMAKE_CXX_FLAGS_RELEASE "/DNDEBUG /O2 /Ob3")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG:FULL /INCREMENTAL:NO /OPT:REF /OPT:ICF")
    set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
else()
    string(REGEX MATCHALL "(^| )-m[a-z0-9\.-]+=?[a-zA-Z0-9_-]*( |$)" CMAKE_CXX_ARCH "${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG "-DBOOST_PYTHON_DEBUG -g -O0 -fno-omit-frame-pointer")
    set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3 -Wfatal-errors -Werror")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -g -fno-omit-frame-pointer -fno-sanitize-recover")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} -fno-omit-frame-pointer")
    set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
endif()
list(REMOVE_DUPLICATES CMAKE_CXX_ARCH)
list(TRANSFORM CMAKE_CXX_ARCH STRIP)
if(CMAKE_CXX_ARCH)
    message(STATUS "Instruction sets: ${CMAKE_CXX_ARCH}")
endif()

# Configure MSVC multithreading library to link against.
# Somehow, setting `MSVC_RUNTIME_LIBRARY` target property is not working.
if(MSVC)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
endif()

# Export symbols to enable building extension module
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DEXPORT_SYMBOLS")
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

# Sub-projects
add_subdirectory(soup)
add_subdirectory(core)

option(BUILD_PYTHON_INTERFACE "Build and install the Python packages." ON)
if(BUILD_PYTHON_INTERFACE)
    include(${CMAKE_SOURCE_DIR}/build_tools/cmake/setupPython.cmake)
    add_subdirectory(python)
endif()

# Create 'docs' optional cmake component to generate documentation
create_component_docs()

# Install the source cmake files
file(GLOB_RECURSE SOURCE_CMAKE_FILES "${CMAKE_SOURCE_DIR}/build_tools/cmake/Find*.cmake")
install(FILES ${SOURCE_CMAKE_FILES}
        DESTINATION "${CMAKE_INSTALL_DATADIR}/${LIBRARY_NAME}/cmake"
)
install(FILES ${CMAKE_SOURCE_DIR}/build_tools/cmake/base.cmake
        DESTINATION "${CMAKE_INSTALL_DATADIR}/${LIBRARY_NAME}/cmake"
        RENAME ${LIBRARY_NAME}_base.cmake
)
install(FILES ${CMAKE_SOURCE_DIR}/build_tools/cmake/boostPythonDocstring.cmake
        DESTINATION "${CMAKE_INSTALL_DATADIR}/${LIBRARY_NAME}/cmake"
)
