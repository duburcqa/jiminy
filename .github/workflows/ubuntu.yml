name: Ubuntu CI (Easy install dependencies)

on:
  # Trigger the workflow on push on the master branch, or for any pull request
  push:
    branches:
      - master
  pull_request:

jobs:
  build-test-and-deploy-doc-ubuntu:
    name: (Ubuntu) Easy install the dependencies. Build the project and run the unit tests. Generate and deploy the documentation.
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    defaults:
      run:
        shell: bash

    env:
      BUILD_TYPE: "Release"

    #####################################################################################

    steps:
    - name: Checkout branch
      uses: actions/checkout@v2

    #####################################################################################

    - name: Setup minimal build environment
      run: |
        # Set Python 3 executable
        if [ ${{ matrix.os }} == "ubuntu-18.04" ] ; then
          PYTHON_EXECUTABLE="/usr/bin/python3.6"
        else
          PYTHON_EXECUTABLE="/usr/bin/python3.8"
        fi
        echo "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" >> $GITHUB_ENV
        echo "/home/runner/.local/bin" >> $GITHUB_PATH
    - name: Installing requirements
      run: |
        sudo "${GITHUB_WORKSPACE}/build_tools/easy_install_deps_ubuntu.sh"

    #####################################################################################

    - name: PEP8 Code Style Check
      run: |
        RootDir="${GITHUB_WORKSPACE}"

        flake8 --count --show-source --statistics "$RootDir/gym_jiminy" "$RootDir/python/jiminy_py"

    #####################################################################################

    - name: Build and install Jiminy
      run: |
        RootDir="${GITHUB_WORKSPACE}"
        InstallDir="$RootDir/install"

        mkdir "$RootDir/build" "$InstallDir"
        cd "$RootDir/build"

        cmake "$RootDir" -DCMAKE_INSTALL_PREFIX="$InstallDir" \
              -DBoost_NO_SYSTEM_PATHS=OFF -DPYTHON_EXECUTABLE="${PYTHON_EXECUTABLE}" \
              -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON -DBUILD_PYTHON_INTERFACE=ON \
              -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
        make install -j2

    #####################################################################################

    - name: Run unit tests
      run: |
        "${GITHUB_WORKSPACE}/build/unit/unit"
        cd "${GITHUB_WORKSPACE}/unit_py"
        "${PYTHON_EXECUTABLE}" -m unittest discover -v

    #####################################################################################

    - name: Generate and install Doxygen documentation
      run: |
        cd build
        cmake . -DCOMPONENT=docs -P ./cmake_install.cmake
    - name: Deploy to GitHub Pages
      if: success() && github.repository == 'Wandercraft/jiminy' && github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: crazy-max/ghaction-github-pages@v1
      with:
        target_branch: gh-pages
        build_dir: docs/html
      env:
        GITHUB_TOKEN: ${{ secrets.GH_DEPLOY }}
