name: Manylinux CI (PyPi deploy)

on:
  # Trigger the workflow on push on the master branch, or for any pull request
  push:
    branches:
      - master
  pull_request:

jobs:
  build-test-and-publish-pypi-manylinux:
    name: >-
      (${{ matrix.container }}) (${{ matrix.PYTHON_VERSION }})
      Build and run the unit tests. Then generate and publish the wheels on PyPi.
    runs-on: ubuntu-20.04
    container: quay.io/pypa/${{ matrix.container }}

    defaults:
      run:
        shell: bash -ieo pipefail {0}  # Using bash enables automatic sourcing `.bashrc` and fail-fast behavior

    env:
      BUILD_TYPE: "Release"

    strategy:
      matrix:
        container: ['manylinux2010_x86_64', 'manylinux_2_24_x86_64']
        PYTHON_VERSION: ['3.6', '3.7', '3.8', '3.9']
        legacy: [false]
        include:
          - container: 'manylinux_2_24_x86_64'
            PYTHON_VERSION: '3.8'
            legacy: true

    #####################################################################################

    steps:
    - name: Checkout jiminy
      uses: actions/checkout@v1  # Cannot use v2 in manylinux containers because it relies on node+javascript

    #####################################################################################

    - name: Setup minimal build environment
      run: |
        pythonLocation=$(find /opt/python -maxdepth 1 -name "$(echo "cp${{ matrix.PYTHON_VERSION }}*" | sed -e 's/\.//g')" -print -quit)

        echo "export PATH=\"${pythonLocation}/bin:\$PATH\"" >> $HOME/.bashrc
        source $HOME/.bashrc

        PYTHON_EXECUTABLE="${pythonLocation}/bin/python${{ matrix.PYTHON_VERSION }}"
        "${PYTHON_EXECUTABLE}" -m pip install --upgrade pip
        "${PYTHON_EXECUTABLE}" -m pip install --upgrade twine wheel auditwheel cmake
        if [ "${{ matrix.legacy }}" == true ] ; then
          "${PYTHON_EXECUTABLE}" -m pip install --upgrade "numpy<1.20"
        else
          "${PYTHON_EXECUTABLE}" -m pip install --upgrade numpy
        fi
        echo "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" >> $GITHUB_ENV

        echo "RootDir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        echo "InstallDir=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV

        git config --global advice.detachedHead false
    - name: Build project dependencies
      run: |
        ./build_tools/build_install_deps_linux.sh
        "${PYTHON_EXECUTABLE}" -m pip install "gym>=0.17.3,<0.18.0" "stable_baselines3>=0.10" "importlib-metadata>=3.3.0"

    #####################################################################################

    - name: Build and install Jiminy
      run: |
        unset Boost_ROOT

        # gcc flag '-s' removes all symbol table and relocation information
        mkdir "$RootDir/build"
        cd "$RootDir/build"
        export LD_LIBRARY_PATH="$InstallDir/lib/:/usr/local/lib"
        cmake "$RootDir" -DCMAKE_INSTALL_PREFIX="$InstallDir" -DCMAKE_PREFIX_PATH="$InstallDir" \
              -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
              -DBOOST_ROOT="$InstallDir" -DBoost_INCLUDE_DIR="$InstallDir/include" \
              -DBoost_NO_SYSTEM_PATHS=TRUE -DBoost_NO_BOOST_CMAKE=TRUE \
              -DBoost_USE_STATIC_LIBS=ON -DPYTHON_EXECUTABLE="${PYTHON_EXECUTABLE}" \
              -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON -DBUILD_PYTHON_INTERFACE=ON \
              -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -s" \
              -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
        make -j2

        mkdir -p "$RootDir/build/pypi/jiminy_py/src/jiminy_py"
        cp -r -H "$InstallDir/lib/python${{ matrix.PYTHON_VERSION }}/site-packages/." "$RootDir/build/pypi/jiminy_py/src/jiminy_py/core"
        find "$RootDir/build/pypi/" -name "*.so*" -exec strip --strip-unneeded -v {} +

        make install

    - name: Generate and install Python Pip wheels
      run: |
        export LD_LIBRARY_PATH="$InstallDir/lib:/usr/local/lib"

        cd "$RootDir/build"
        cmake . -DCOMPONENT=pypi -P ./cmake_install.cmake

        # Note that `--strip` option is not used but rather done manually because the
        # built-in option corrupts the shared library for some reason...
        "${PYTHON_EXECUTABLE}" "$RootDir/build_tools/wheel_repair_linux.py" repair \
            -w "$RootDir/build/wheelhouse" "$RootDir"/build/pypi/dist/jiminy_py/*.whl
        "${PYTHON_EXECUTABLE}" -m pip install --force-reinstall --no-deps "$RootDir"/build/wheelhouse/*.whl
    - name: Upload the wheel for Linux of Jiminy_py
      if: success() && github.repository == 'duburcqa/jiminy'
      uses: actions/upload-artifact@v1
      with:
        name: jiminy_py${{ matrix.PYTHON_VERSION }}-wheel-${{ matrix.legacy }}
        path: build/wheelhouse

    #####################################################################################

    - name: Run unit tests
      run: |
        ./build/unit/unit

        cd "$RootDir/unit_py"
        "${PYTHON_EXECUTABLE}" -m unittest discover -v

    #####################################################################################

    - name: Publish on PyPi the wheel for Linux of Jiminy_py
      if: success() && github.repository == 'duburcqa/jiminy' && github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_DEPLOY }}
        packages_dir: build/wheelhouse
    - name: Publish on PyPi the wheel of Gym Jiminy (Any platform / Any python3 version)
      if: >-
        matrix.container == 'manylinux2010_x86_64' && matrix.PYTHON_VERSION == '3.6' && matrix.legacy == false && success() &&
        github.repository == 'duburcqa/jiminy' && github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_DEPLOY }}
        packages_dir: build/pypi/dist/gym_jiminy
