name: Manylinux CI (PyPi deploy)

on:
  # Trigger the workflow on push on the master branch, or for any pull request
  push:
    branches:
      - master
  pull_request:

jobs:
  build-manylinux:
    name: (${{ matrix.container }}) (${{ matrix.PYTHON_VERSION }}) Build wheels.

    strategy:
      matrix:
        container: [
          'quay.io/pypa/manylinux2014_x86_64:latest',    # Not compatible with CXX11 ABI
          #'quay.io/pypa/manylinux_2_24_x86_64:latest',  # Not compatible with C++17
          'quay.io/pypa/manylinux_2_28_x86_64:latest'    # Not compatible with Ubuntu 18.04
        ]
        PYTHON_VERSION: ['cp36', 'cp37', 'cp38', 'cp39', 'cp310']

    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}

    defaults:
      run:
        shell: bash -ieo pipefail {0}  # Using bash enables automatic sourcing `.bashrc` and fail-fast behavior

    env:
      BUILD_TYPE: "Release"

    #####################################################################################

    steps:
    - name: Checkout jiminy
      uses: actions/checkout@v1  # Cannot use v2 in manylinux containers because it relies on node+javascript

    #####################################################################################

    - name: Setup minimal build environment
      run: |
        pythonLocation=$(find /opt/python -maxdepth 1 -name "$(echo "${{ matrix.PYTHON_VERSION }}*" | sed -e 's/\.//g')" -print -quit)

        echo "export PATH=\"${pythonLocation}/bin:\$PATH\"" >> $HOME/.bashrc
        source $HOME/.bashrc

        git config --global advice.detachedHead false

        PYTHON_EXECUTABLE="${pythonLocation}/bin/python"
        echo "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" >> $GITHUB_ENV
        echo "RootDir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        echo "InstallDir=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV

        "${PYTHON_EXECUTABLE}" -m pip install --upgrade pip
        "${PYTHON_EXECUTABLE}" -m pip install --upgrade twine wheel cmake
        "${PYTHON_EXECUTABLE}" -m pip install --upgrade "numpy<1.22"  # for numba compat.
    - name: Build project dependencies
      run: |
        ./build_tools/build_install_deps_unix.sh
        "${PYTHON_EXECUTABLE}" -m pip install --prefer-binary "gym>=0.18.3" "stable_baselines3>=0.10" "importlib-metadata>=3.3.0"

    #####################################################################################

    - name: Build and install Jiminy
      run: |
        unset Boost_ROOT

        # Build jiminy
        mkdir "$RootDir/build"
        cd "$RootDir/build"
        export LD_LIBRARY_PATH="$InstallDir/lib:$InstallDir/lib64:/usr/local/lib"
        cmake "$RootDir" -DCMAKE_INSTALL_PREFIX="$InstallDir" -DCMAKE_PREFIX_PATH="$InstallDir" \
              -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF -DCMAKE_VERBOSE_MAKEFILE=ON \
              -DBOOST_ROOT="$InstallDir" -DBoost_INCLUDE_DIR="$InstallDir/include" \
              -DBoost_NO_SYSTEM_PATHS=TRUE -DBoost_NO_BOOST_CMAKE=TRUE \
              -DBoost_USE_STATIC_LIBS=ON -DPYTHON_EXECUTABLE="${PYTHON_EXECUTABLE}" \
              -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON -DBUILD_PYTHON_INTERFACE=ON \
              -DINSTALL_GYM_JIMINY=${{ (matrix.PYTHON_VERSION == 'cp310' && 'OFF') || 'ON' }} \
              -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
        make -j2

        # Bundle the boost python dependencies with jiminy
        mkdir -p "$RootDir/build/pypi/jiminy_py/src/jiminy_py"
        PYTHON_VERSION="$(${PYTHON_EXECUTABLE} -c "import sysconfig; print(sysconfig.get_config_var('py_version_short'))")"
        cp -r -H "$InstallDir/lib/python${PYTHON_VERSION}/site-packages/." "$RootDir/build/pypi/jiminy_py/src/jiminy_py/core"

        # Install jiminy along with its dependencies
        make install

        # Strip all symbol table and relocation information from python bindings and shared libraries
        find "$RootDir/build/pypi/" -name "*.so*" -print -exec strip -s {} +
        find "$InstallDir/lib"* -name "*.so*" -maxdepth 1 -print -exec strip -s {} +

    #####################################################################################

    - name: Generate Python Pip wheels
      run: |
        export LD_LIBRARY_PATH="$InstallDir/lib:$InstallDir/lib64:/usr/local/lib"

        cd "$RootDir/build"
        cmake . -DCOMPONENT=pypi -P ./cmake_install.cmake

        # Note that `--strip` option is not used but rather done manually because the
        # built-in option corrupts the shared library for some reason...
        "${PYTHON_EXECUTABLE}" "$RootDir/build_tools/wheel_repair_linux.py" repair \
            -w "$RootDir/build/wheelhouse" "$RootDir/build/pypi/dist/jiminy_py/"*.whl
    - name: Upload the wheel of Jiminy for Linux
      uses: actions/upload-artifact@v1
      with:
        name: wheelhouse
        path: build/wheelhouse
    - name: Upload the wheels of Gym Jiminy
      if: success() && matrix.container == 'quay.io/pypa/manylinux2014_x86_64:latest' && matrix.PYTHON_VERSION == 'cp36'
      uses: actions/upload-artifact@v1
      with:
        name: wheelhouse
        path: build/pypi/dist/gym_jiminy

    #####################################################################################

  test-user-linux:
    name: (ubuntu-20.04) Build a pip extension and run the unit tests.
    needs: build-manylinux
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash -ieo pipefail {0}  # Using bash enables automatic sourcing `.bashrc` and fail-fast behavior

    env:
      BUILD_TYPE: "Release"

    #####################################################################################

    steps:
    - name: Checkout jiminy
      uses: actions/checkout@v2
    - name: Setup minimal build environment
      run: |
        PYTHON_EXECUTABLE="/usr/bin/python3"
        echo "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" >> $GITHUB_ENV
        echo "RootDir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        echo "InstallDir=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV

        echo "/home/runner/.local/bin" >> $GITHUB_PATH
    - name: Installing requirements
      run: |
        sudo env "PATH=$PATH" "$RootDir/build_tools/easy_install_deps_ubuntu.sh"
        "${PYTHON_EXECUTABLE}" -m pip install --prefer-binary pillow

    #####################################################################################

    - name: Download the wheels previously generated
      uses: actions/download-artifact@v1
      with:
        name: wheelhouse
        path: wheelhouse
    - name: Install the wheels previously generated
      run: |
        "${PYTHON_EXECUTABLE}" -m pip install --prefer-binary --find-links=wheelhouse jiminy_py

    #####################################################################################

    - name: Build extension module
      run: |
        mkdir -p "$RootDir/examples/cpp/pip_extension/build"
        cd "$RootDir/examples/cpp/pip_extension/build"
        cmake "$RootDir/examples/cpp/pip_extension" -DCMAKE_INSTALL_PREFIX="$InstallDir" \
               -DCMAKE_PREFIX_PATH="$InstallDir" -DPYTHON_EXECUTABLE="${PYTHON_EXECUTABLE}" \
               -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
        make install

        "$InstallDir/bin/pip_double_pendulum"
    - name: Run unit tests on user environment
      run: |
        cd "${GITHUB_WORKSPACE}/unit_py"
        "${PYTHON_EXECUTABLE}" -m unittest discover -v

    #####################################################################################

  publish-pypi-manylinux:
    name: (Manylinux) Publish on PyPi the wheel for Linux of jiminy_py and gym_jiminy

    needs: test-user-linux
    runs-on: ubuntu-20.04
    if: github.repository == 'duburcqa/jiminy' && github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Download the wheels previously generated
      uses: actions/download-artifact@v1
      with:
        name: wheelhouse
        path: wheelhouse
    - name: Publish the wheels on PyPi
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_DEPLOY }}
        packages_dir: wheelhouse
